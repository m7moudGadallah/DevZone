// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_DEV")
}

model User {
  id                String     @id @default(uuid())
  username          String     @unique
  email             String     @unique
  about             String?
  password          String
  passwordChangedAt DateTime?  @map("password_changed_at")
  createdAt         DateTime   @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt         DateTime   @default(now()) @map("updated_at") @db.Timestamptz(3)
  Post              Post[]
  Comment           Comment[]
  Vote              Vote[]
  Question          Question[]
  Answer            Answer[]

  @@map("users")
}

model Post {
  id        String    @id @default(uuid())
  title     String
  url       String
  content   String
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  userId    String    @map("user_id")
  User      User      @relation(fields: [userId], references: [id])
  Comment   Comment[]
  Vote      Vote[]

  @@map("posts")
}

model Comment {
  id              String    @id @default(uuid())
  content         String
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  userId          String    @map("user_id")
  postId          String    @map("post_id")
  User            User      @relation(fields: [userId], references: [id])
  Post            Post      @relation(fields: [postId], references: [id])
  parentCommentId String?   @map("parent_comment_id")
  ParentComment   Comment?  @relation("ChildToParent", fields: [parentCommentId], references: [id])
  childComment    Comment[] @relation("ChildToParent")

  @@map("comments")
}

model Vote {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  userId    String   @map("user_id")
  postId    String   @map("post_id")
  User      User     @relation(fields: [userId], references: [id])
  Post      Post     @relation(fields: [postId], references: [id])

  @@map("votes")
}

model Question {
  id        String   @id @default(uuid())
  title     String
  content   String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  userId    String   @map("user_id")
  User      User     @relation(fields: [userId], references: [id])
  Answer    Answer[]

  @@map("questions")
}

model Answer {
  id         String   @id @default(uuid())
  content    String
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  userId     String   @map("user_id")
  questionId String   @map("question_id")
  User       User     @relation(fields: [userId], references: [id])
  Question   Question @relation(fields: [questionId], references: [id])

  @@map("answers")
}

model Tag {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  @@map("tags")
}
